{
  "version": 3,
  "sources": ["../../../src/lib/config/TLUserPreferences.ts"],
  "sourcesContent": ["import { atom } from '@tldraw/state'\nimport { defineMigrations, migrate } from '@tldraw/store'\nimport { getDefaultTranslationLocale } from '@tldraw/tlschema'\nimport { T } from '@tldraw/validate'\nimport { uniqueId } from '../utils/uniqueId'\n\nconst USER_DATA_KEY = 'TLDRAW_USER_DATA_v3'\n\n/**\n * A user of tldraw\n *\n * @public\n */\nexport interface TLUserPreferences {\n\tid: string\n\tname: string\n\tlocale: string\n\tcolor: string\n\tisDarkMode: boolean\n\tanimationSpeed: number\n\tisSnapMode: boolean\n}\n\ninterface UserDataSnapshot {\n\tversion: number\n\tuser: TLUserPreferences\n}\n\ninterface UserChangeBroadcastMessage {\n\ttype: typeof broadcastEventKey\n\torigin: string\n\tdata: UserDataSnapshot\n}\n\nconst userTypeValidator: T.Validator<TLUserPreferences> = T.object<TLUserPreferences>({\n\tid: T.string,\n\tname: T.string,\n\tlocale: T.string,\n\tcolor: T.string,\n\tisDarkMode: T.boolean,\n\tanimationSpeed: T.number,\n\tisSnapMode: T.boolean,\n})\n\nconst Versions = {\n\tAddAnimationSpeed: 1,\n\tAddIsSnapMode: 2,\n} as const\n\nconst userMigrations = defineMigrations({\n\tcurrentVersion: Versions.AddIsSnapMode,\n\tmigrators: {\n\t\t[Versions.AddAnimationSpeed]: {\n\t\t\tup: (user) => {\n\t\t\t\treturn {\n\t\t\t\t\t...user,\n\t\t\t\t\tanimationSpeed: 1,\n\t\t\t\t}\n\t\t\t},\n\t\t\tdown: ({ animationSpeed: _, ...user }) => {\n\t\t\t\treturn user\n\t\t\t},\n\t\t},\n\t\t[Versions.AddIsSnapMode]: {\n\t\t\tup: (user: TLUserPreferences) => {\n\t\t\t\treturn { ...user, isSnapMode: false }\n\t\t\t},\n\t\t\tdown: ({ isSnapMode: _, ...user }: TLUserPreferences) => {\n\t\t\t\treturn user\n\t\t\t},\n\t\t},\n\t},\n})\n\n/** @internal */\nexport const USER_COLORS = [\n\t'#FF802B',\n\t'#EC5E41',\n\t'#F2555A',\n\t'#F04F88',\n\t'#E34BA9',\n\t'#BD54C6',\n\t'#9D5BD2',\n\t'#7B66DC',\n\t'#02B1CC',\n\t'#11B3A3',\n\t'#39B178',\n\t'#55B467',\n] as const\n\nfunction getRandomColor() {\n\treturn USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)]\n}\n\n/** @public */\nexport function getFreshUserPreferences(): TLUserPreferences {\n\treturn {\n\t\tid: uniqueId(),\n\t\tlocale: typeof window !== 'undefined' ? getDefaultTranslationLocale() : 'en',\n\t\tname: 'New User',\n\t\tcolor: getRandomColor(),\n\t\t// TODO: detect dark mode\n\t\tisDarkMode: false,\n\t\tanimationSpeed: 1,\n\t\tisSnapMode: false,\n\t}\n}\n\nfunction migrateUserPreferences(userData: unknown) {\n\tif (userData === null || typeof userData !== 'object') {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\tif (!('version' in userData) || !('user' in userData) || typeof userData.version !== 'number') {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\tconst migrationResult = migrate<TLUserPreferences>({\n\t\tvalue: userData.user,\n\t\tfromVersion: userData.version,\n\t\ttoVersion: userMigrations.currentVersion ?? 0,\n\t\tmigrations: userMigrations,\n\t})\n\n\tif (migrationResult.type === 'error') {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\ttry {\n\t\tuserTypeValidator.validate(migrationResult.value)\n\t} catch (e) {\n\t\treturn getFreshUserPreferences()\n\t}\n\n\treturn migrationResult.value\n}\n\nfunction loadUserPreferences(): TLUserPreferences {\n\tconst userData =\n\t\ttypeof window === 'undefined'\n\t\t\t? null\n\t\t\t: ((JSON.parse(window?.localStorage?.getItem(USER_DATA_KEY) || 'null') ??\n\t\t\t\t\tnull) as null | UserDataSnapshot)\n\n\treturn migrateUserPreferences(userData)\n}\n\nconst globalUserPreferences = atom<TLUserPreferences>('globalUserData', loadUserPreferences())\n\nfunction storeUserPreferences() {\n\tif (typeof window !== 'undefined' && window.localStorage) {\n\t\twindow.localStorage.setItem(\n\t\t\tUSER_DATA_KEY,\n\t\t\tJSON.stringify({\n\t\t\t\tversion: userMigrations.currentVersion,\n\t\t\t\tuser: globalUserPreferences.value,\n\t\t\t})\n\t\t)\n\t}\n}\n\n/** @public */\nexport function setUserPreferences(user: TLUserPreferences) {\n\tuserTypeValidator.validate(user)\n\tglobalUserPreferences.set(user)\n\tstoreUserPreferences()\n\tbroadcastUserPreferencesChange()\n}\n\nconst isTest = typeof process !== 'undefined' && process.env.NODE_ENV === 'test'\n\nconst channel =\n\ttypeof BroadcastChannel !== 'undefined' && !isTest\n\t\t? new BroadcastChannel('tldraw-user-sync')\n\t\t: null\n\nchannel?.addEventListener('message', (e) => {\n\tconst data = e.data as undefined | UserChangeBroadcastMessage\n\tif (data?.type === broadcastEventKey && data?.origin !== broadcastOrigin) {\n\t\tglobalUserPreferences.set(migrateUserPreferences(data.data))\n\t}\n})\n\nconst broadcastOrigin = uniqueId()\nconst broadcastEventKey = 'tldraw-user-preferences-change' as const\n\nfunction broadcastUserPreferencesChange() {\n\tchannel?.postMessage({\n\t\ttype: broadcastEventKey,\n\t\torigin: broadcastOrigin,\n\t\tdata: {\n\t\t\tuser: globalUserPreferences.value,\n\t\t\tversion: userMigrations.currentVersion,\n\t\t},\n\t} satisfies UserChangeBroadcastMessage)\n}\n\n/** @public */\nexport function getUserPreferences() {\n\treturn globalUserPreferences.value\n}\n"],
  "mappings": "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",
  "names": []
}
