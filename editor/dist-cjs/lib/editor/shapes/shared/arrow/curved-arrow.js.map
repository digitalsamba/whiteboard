{
  "version": 3,
  "sources": ["../../../../../../src/lib/editor/shapes/shared/arrow/curved-arrow.ts"],
  "sourcesContent": ["import { TLArrowShape } from '@tldraw/tlschema'\nimport { Box2d } from '../../../../primitives/Box2d'\nimport { Matrix2d } from '../../../../primitives/Matrix2d'\nimport { Vec2d, VecLike } from '../../../../primitives/Vec2d'\nimport { intersectCirclePolygon, intersectCirclePolyline } from '../../../../primitives/intersect'\nimport {\n\tPI,\n\tPI2,\n\tgetArcLength,\n\tgetPointOnCircle,\n\tisSafeFloat,\n\tlerpAngles,\n\tshortAngleDist,\n} from '../../../../primitives/utils'\nimport type { Editor } from '../../../Editor'\nimport { TLArcInfo, TLArrowInfo } from './arrow-types'\nimport {\n\tBOUND_ARROW_OFFSET,\n\tMIN_ARROW_LENGTH,\n\tSTROKE_SIZES,\n\tWAY_TOO_BIG_ARROW_BEND_FACTOR,\n\tgetArrowTerminalsInArrowSpace,\n\tgetBoundShapeInfoForTerminal,\n} from './shared'\nimport { getStraightArrowInfo } from './straight-arrow'\n\nexport function getCurvedArrowInfo(\n\teditor: Editor,\n\tshape: TLArrowShape,\n\textraBend = 0\n): TLArrowInfo {\n\tconst { arrowheadEnd, arrowheadStart } = shape.props\n\tconst bend = shape.props.bend + extraBend\n\n\tif (Math.abs(bend) > Math.abs(shape.props.bend * WAY_TOO_BIG_ARROW_BEND_FACTOR)) {\n\t\treturn getStraightArrowInfo(editor, shape)\n\t}\n\n\tconst terminalsInArrowSpace = getArrowTerminalsInArrowSpace(editor, shape)\n\n\tconst med = Vec2d.Med(terminalsInArrowSpace.start, terminalsInArrowSpace.end) // point between start and end\n\tconst u = Vec2d.Sub(terminalsInArrowSpace.end, terminalsInArrowSpace.start).uni() // unit vector between start and end\n\tconst middle = Vec2d.Add(med, u.per().mul(-bend)) // middle handle\n\n\tconst startShapeInfo = getBoundShapeInfoForTerminal(editor, shape.props.start)\n\tconst endShapeInfo = getBoundShapeInfoForTerminal(editor, shape.props.end)\n\n\t// The positions of the body of the arrow, which may be different\n\t// than the arrow's start / end points if the arrow is bound to shapes\n\tconst a = terminalsInArrowSpace.start.clone()\n\tconst b = terminalsInArrowSpace.end.clone()\n\tconst c = middle.clone()\n\n\tconst handleArc = getArcInfo(a, b, c)\n\n\tif (\n\t\thandleArc.length === 0 ||\n\t\thandleArc.size === 0 ||\n\t\t!isSafeFloat(handleArc.length) ||\n\t\t!isSafeFloat(handleArc.size)\n\t) {\n\t\treturn getStraightArrowInfo(editor, shape)\n\t}\n\n\tconst arrowPageTransform = editor.getShapePageTransform(shape)!\n\n\tif (startShapeInfo && !startShapeInfo.isExact) {\n\t\t// Points in page space\n\t\tconst startInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, a)\n\t\tconst endInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, b)\n\t\tconst centerInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, handleArc.center)\n\n\t\t// Points in local space of the start shape\n\t\tconst inverseTransform = Matrix2d.Inverse(startShapeInfo.transform)\n\t\tconst startInStartShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, startInPageSpace)\n\t\tconst endInStartShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, endInPageSpace)\n\t\tconst centerInStartShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, centerInPageSpace)\n\n\t\tconst { isClosed } = startShapeInfo\n\t\tconst fn = isClosed ? intersectCirclePolygon : intersectCirclePolyline\n\n\t\tlet point: VecLike | undefined\n\n\t\tlet intersections = fn(\n\t\t\tcenterInStartShapeLocalSpace,\n\t\t\thandleArc.radius,\n\t\t\teditor.getShapeGeometry(startShapeInfo.shape).vertices\n\t\t)\n\n\t\tif (intersections) {\n\t\t\tintersections = intersections.filter(\n\t\t\t\t(pt) =>\n\t\t\t\t\t+Vec2d.Clockwise(startInStartShapeLocalSpace, pt, endInStartShapeLocalSpace) ===\n\t\t\t\t\thandleArc.sweepFlag\n\t\t\t)\n\n\t\t\tconst angleToMiddle = Vec2d.Angle(handleArc.center, middle)\n\t\t\tconst angleToStart = Vec2d.Angle(handleArc.center, terminalsInArrowSpace.start)\n\t\t\tconst comparisonAngle = lerpAngles(angleToMiddle, angleToStart, 0.5)\n\n\t\t\tintersections.sort(\n\t\t\t\t(p0, p1) =>\n\t\t\t\t\tMath.abs(shortAngleDist(comparisonAngle, centerInStartShapeLocalSpace.angle(p0))) -\n\t\t\t\t\tMath.abs(shortAngleDist(comparisonAngle, centerInStartShapeLocalSpace.angle(p1)))\n\t\t\t)\n\n\t\t\tpoint = intersections[0] ?? (isClosed ? undefined : startInStartShapeLocalSpace)\n\t\t} else {\n\t\t\tpoint = isClosed ? undefined : startInStartShapeLocalSpace\n\t\t}\n\n\t\tif (point) {\n\t\t\ta.setTo(\n\t\t\t\teditor.getPointInShapeSpace(shape, Matrix2d.applyToPoint(startShapeInfo.transform, point))\n\t\t\t)\n\n\t\t\tstartShapeInfo.didIntersect = true\n\n\t\t\tif (arrowheadStart !== 'none') {\n\t\t\t\tconst offset =\n\t\t\t\t\tBOUND_ARROW_OFFSET +\n\t\t\t\t\tSTROKE_SIZES[shape.props.size] / 2 +\n\t\t\t\t\t('size' in startShapeInfo.shape.props\n\t\t\t\t\t\t? STROKE_SIZES[startShapeInfo.shape.props.size] / 2\n\t\t\t\t\t\t: 0)\n\n\t\t\t\ta.setTo(\n\t\t\t\t\tgetPointOnCircle(\n\t\t\t\t\t\thandleArc.center.x,\n\t\t\t\t\t\thandleArc.center.y,\n\t\t\t\t\t\thandleArc.radius,\n\t\t\t\t\t\tlerpAngles(\n\t\t\t\t\t\t\tVec2d.Angle(handleArc.center, a),\n\t\t\t\t\t\t\tVec2d.Angle(handleArc.center, middle),\n\t\t\t\t\t\t\toffset / Math.abs(getArcLength(handleArc.center, handleArc.radius, a, middle))\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tif (endShapeInfo && !endShapeInfo.isExact) {\n\t\t// get points in shape's coordinates?\n\t\tconst startInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, a)\n\t\tconst endInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, b)\n\t\tconst centerInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, handleArc.center)\n\n\t\tconst inverseTransform = Matrix2d.Inverse(endShapeInfo.transform)\n\n\t\tconst startInEndShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, startInPageSpace)\n\t\tconst endInEndShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, endInPageSpace)\n\t\tconst centerInEndShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, centerInPageSpace)\n\n\t\tconst isClosed = endShapeInfo.isClosed\n\t\tconst fn = isClosed ? intersectCirclePolygon : intersectCirclePolyline\n\n\t\tconst angleToMiddle = Vec2d.Angle(handleArc.center, middle)\n\t\tconst angleToEnd = Vec2d.Angle(handleArc.center, terminalsInArrowSpace.end)\n\t\tconst comparisonAngle = lerpAngles(angleToMiddle, angleToEnd, 0.5)\n\n\t\tlet point: VecLike | undefined\n\n\t\tlet intersections = fn(\n\t\t\tcenterInEndShapeLocalSpace,\n\t\t\thandleArc.radius,\n\t\t\teditor.getShapeGeometry(endShapeInfo.shape).vertices\n\t\t)\n\n\t\tif (intersections) {\n\t\t\tintersections = intersections.filter(\n\t\t\t\t(pt) =>\n\t\t\t\t\t+Vec2d.Clockwise(startInEndShapeLocalSpace, pt, endInEndShapeLocalSpace) ===\n\t\t\t\t\thandleArc.sweepFlag\n\t\t\t)\n\n\t\t\tintersections.sort(\n\t\t\t\t(p0, p1) =>\n\t\t\t\t\tMath.abs(shortAngleDist(comparisonAngle, centerInEndShapeLocalSpace.angle(p0))) -\n\t\t\t\t\tMath.abs(shortAngleDist(comparisonAngle, centerInEndShapeLocalSpace.angle(p1)))\n\t\t\t)\n\n\t\t\tpoint = intersections[0] ?? (isClosed ? undefined : endInEndShapeLocalSpace)\n\t\t} else {\n\t\t\tpoint = isClosed ? undefined : endInEndShapeLocalSpace\n\t\t}\n\n\t\tif (point) {\n\t\t\t// Set b to target local point -> page point -> shape local point\n\t\t\tb.setTo(\n\t\t\t\teditor.getPointInShapeSpace(shape, Matrix2d.applyToPoint(endShapeInfo.transform, point))\n\t\t\t)\n\n\t\t\tendShapeInfo.didIntersect = true\n\n\t\t\tif (arrowheadEnd !== 'none') {\n\t\t\t\tlet offset =\n\t\t\t\t\tBOUND_ARROW_OFFSET +\n\t\t\t\t\tSTROKE_SIZES[shape.props.size] / 2 +\n\t\t\t\t\t('size' in endShapeInfo.shape.props ? STROKE_SIZES[endShapeInfo.shape.props.size] / 2 : 0)\n\n\t\t\t\tif (Vec2d.Dist(a, b) < MIN_ARROW_LENGTH) {\n\t\t\t\t\toffset *= -2\n\t\t\t\t}\n\n\t\t\t\tb.setTo(\n\t\t\t\t\tgetPointOnCircle(\n\t\t\t\t\t\thandleArc.center.x,\n\t\t\t\t\t\thandleArc.center.y,\n\t\t\t\t\t\thandleArc.radius,\n\t\t\t\t\t\tlerpAngles(\n\t\t\t\t\t\t\tVec2d.Angle(handleArc.center, b),\n\t\t\t\t\t\t\tVec2d.Angle(handleArc.center, middle),\n\t\t\t\t\t\t\toffset / Math.abs(getArcLength(handleArc.center, handleArc.radius, b, middle))\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tconst length = Math.abs(getArcLength(handleArc.center, handleArc.radius, a, b))\n\n\tif (length < MIN_ARROW_LENGTH / 2) {\n\t\ta.setTo(terminalsInArrowSpace.start)\n\t\tb.setTo(terminalsInArrowSpace.end)\n\t}\n\n\tif (\n\t\tstartShapeInfo &&\n\t\tendShapeInfo &&\n\t\tstartShapeInfo.shape !== endShapeInfo.shape &&\n\t\t!startShapeInfo.isExact &&\n\t\t!endShapeInfo.isExact\n\t) {\n\t\t// If we missed an intersection, then try\n\t\tconst startAngle = Vec2d.Angle(handleArc.center, a)\n\t\tconst endAngle = Vec2d.Angle(handleArc.center, b)\n\n\t\tconst offset = handleArc.sweepFlag ? MIN_ARROW_LENGTH : -MIN_ARROW_LENGTH\n\t\tconst arcLength = getArcLength(handleArc.center, handleArc.radius, b, a)\n\t\tconst {\n\t\t\tcenter: { x, y },\n\t\t\tradius,\n\t\t} = handleArc\n\n\t\tif (startShapeInfo && !startShapeInfo.didIntersect) {\n\t\t\ta.setTo(getPointOnCircle(x, y, radius, lerpAngles(startAngle, endAngle, offset / arcLength)))\n\t\t}\n\n\t\tif (endShapeInfo && !endShapeInfo.didIntersect) {\n\t\t\tb.setTo(getPointOnCircle(x, y, radius, lerpAngles(startAngle, endAngle, -offset / arcLength)))\n\t\t}\n\t}\n\n\tlet midAngle = lerpAngles(Vec2d.Angle(handleArc.center, a), Vec2d.Angle(handleArc.center, b), 0.5)\n\tlet midPoint = getPointOnCircle(\n\t\thandleArc.center.x,\n\t\thandleArc.center.y,\n\t\thandleArc.radius,\n\t\tmidAngle\n\t)\n\n\tif (+Vec2d.Clockwise(a, midPoint, b) !== handleArc.sweepFlag) {\n\t\tmidAngle += PI\n\t\tmidPoint = getPointOnCircle(handleArc.center.x, handleArc.center.y, handleArc.radius, midAngle)\n\t}\n\n\tc.setTo(midPoint)\n\n\tconst bodyArc = getArcInfo(a, b, c)\n\n\treturn {\n\t\tisStraight: false,\n\t\tstart: {\n\t\t\tpoint: a,\n\t\t\thandle: terminalsInArrowSpace.start,\n\t\t\tarrowhead: shape.props.arrowheadStart,\n\t\t},\n\t\tend: {\n\t\t\tpoint: b,\n\t\t\thandle: terminalsInArrowSpace.end,\n\t\t\tarrowhead: shape.props.arrowheadEnd,\n\t\t},\n\t\tmiddle: c,\n\t\thandleArc,\n\t\tbodyArc,\n\t\tisValid: bodyArc.length !== 0 && isFinite(bodyArc.center.x) && isFinite(bodyArc.center.y),\n\t}\n}\n\n/**\n * Get a solid path for a curved arrow's handles.\n *\n * @param info - The arrow info.\n * @public\n */\nexport function getCurvedArrowHandlePath(info: TLArrowInfo & { isStraight: false }) {\n\tconst {\n\t\tstart,\n\t\tend,\n\t\thandleArc: { radius, largeArcFlag, sweepFlag },\n\t} = info\n\treturn `M${start.handle.x},${start.handle.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.handle.x},${end.handle.y}`\n}\n\n/**\n * Get a solid path for a curved arrow's body.\n *\n * @param info - The arrow info.\n * @public\n */\nexport function getSolidCurvedArrowPath(info: TLArrowInfo & { isStraight: false }) {\n\tconst {\n\t\tstart,\n\t\tend,\n\t\tbodyArc: { radius, largeArcFlag, sweepFlag },\n\t} = info\n\treturn `M${start.point.x},${start.point.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.point.x},${end.point.y}`\n}\n\n/**\n * Get a point along an arc.\n *\n * @param center - The arc's center.\n * @param radius - The arc's radius.\n * @param startAngle - The start point of the arc.\n * @param size - The size of the arc.\n * @param t - The point along the arc to get.\n */\nexport function getPointOnArc(\n\tcenter: VecLike,\n\tradius: number,\n\tstartAngle: number,\n\tsize: number,\n\tt: number\n) {\n\tconst angle = startAngle + size * t\n\treturn new Vec2d(center.x + radius * Math.cos(angle), center.y + radius * Math.sin(angle))\n}\n\n/**\n * Get a bounding box for an arc.\n *\n * @param center - The arc's center.\n * @param radius - The arc's radius.\n * @param start - The start point of the arc.\n * @param size - The size of the arc.\n */\nexport function getArcBoundingBox(center: VecLike, radius: number, start: VecLike, size: number) {\n\tlet minX = Infinity\n\tlet minY = Infinity\n\tlet maxX = -Infinity\n\tlet maxY = -Infinity\n\n\tconst startAngle = Vec2d.Angle(center, start)\n\n\t// Test 20 points along the arc\n\tfor (let i = 0; i < 20; i++) {\n\t\tconst angle = startAngle + size * (i / 19)\n\t\tconst x = center.x + radius * Math.cos(angle)\n\t\tconst y = center.y + radius * Math.sin(angle)\n\n\t\tminX = Math.min(x, minX)\n\t\tminY = Math.min(y, minY)\n\t\tmaxX = Math.max(x, maxX)\n\t\tmaxY = Math.max(y, maxY)\n\t}\n\n\treturn new Box2d(minX, minY, maxX - minX, maxY - minY)\n}\n\n/**\n * Get info about an arc formed by three points.\n *\n * @param a - The start of the arc\n * @param b - The end of the arc\n * @param c - A point on the arc\n */\nexport function getArcInfo(a: VecLike, b: VecLike, c: VecLike): TLArcInfo {\n\t// find a circle from the three points\n\tconst u = -2 * (a.x * (b.y - c.y) - a.y * (b.x - c.x) + b.x * c.y - c.x * b.y)\n\n\tconst center = {\n\t\tx:\n\t\t\t((a.x * a.x + a.y * a.y) * (c.y - b.y) +\n\t\t\t\t(b.x * b.x + b.y * b.y) * (a.y - c.y) +\n\t\t\t\t(c.x * c.x + c.y * c.y) * (b.y - a.y)) /\n\t\t\tu,\n\t\ty:\n\t\t\t((a.x * a.x + a.y * a.y) * (b.x - c.x) +\n\t\t\t\t(b.x * b.x + b.y * b.y) * (c.x - a.x) +\n\t\t\t\t(c.x * c.x + c.y * c.y) * (a.x - b.x)) /\n\t\t\tu,\n\t}\n\n\tconst radius = Vec2d.Dist(center, a)\n\n\t// Whether to draw the arc clockwise or counter-clockwise (are the points clockwise?)\n\tconst sweepFlag = +Vec2d.Clockwise(a, c, b)\n\n\t// The base angle of the arc in radians\n\tconst ab = Math.hypot(a.y - b.y, a.x - b.x)\n\tconst bc = Math.hypot(b.y - c.y, b.x - c.x)\n\tconst ca = Math.hypot(c.y - a.y, c.x - a.x)\n\n\tconst theta = Math.acos((bc * bc + ca * ca - ab * ab) / (2 * bc * ca)) * 2\n\n\t// Whether to draw the long arc or short arc\n\tconst largeArcFlag = +(PI > theta)\n\n\t// The size of the arc to draw in radians\n\tconst size = (PI2 - theta) * (sweepFlag ? 1 : -1)\n\n\t// The length of the arc to draw in distance units\n\tconst length = size * radius\n\n\treturn {\n\t\tcenter,\n\t\tradius,\n\t\tsize,\n\t\tlength,\n\t\tlargeArcFlag,\n\t\tsweepFlag,\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
