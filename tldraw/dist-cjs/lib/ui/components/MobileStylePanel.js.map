{
  "version": 3,
  "sources": ["../../../../src/lib/ui/components/MobileStylePanel.tsx"],
  "sourcesContent": ["import { DefaultColorStyle, getDefaultColorTheme, useEditor, useValue } from '@tldraw/editor'\nimport { useCallback } from 'react'\nimport { useTranslation } from '../hooks/useTranslation/useTranslation'\nimport { StylePanel } from './StylePanel/StylePanel'\nimport { Button } from './primitives/Button'\nimport { Icon } from './primitives/Icon'\nimport { Popover, PopoverContent, PopoverTrigger } from './primitives/Popover'\n\nexport function MobileStylePanel() {\n\tconst editor = useEditor()\n\tconst msg = useTranslation()\n\n\tconst currentColor = useValue(\n\t\t'current color',\n\t\t() => {\n\t\t\tconst color = editor.sharedStyles.get(DefaultColorStyle)\n\t\t\tif (!color) return 'var(--color-muted-1)'\n\t\t\tif (color.type === 'mixed') return null\n\t\t\tconst theme = getDefaultColorTheme({ isDarkMode: editor.user.isDarkMode })\n\t\t\treturn theme[color.value].solid\n\t\t},\n\t\t[editor]\n\t)\n\n\tconst disableStylePanel = useValue(\n\t\t'isHandOrEraserToolActive',\n\t\t() => editor.isInAny('hand', 'zoom', 'eraser', 'laser'),\n\t\t[editor]\n\t)\n\n\tconst handleStylesOpenChange = useCallback(\n\t\t(isOpen: boolean) => {\n\t\t\tif (!isOpen) {\n\t\t\t\teditor.updateInstanceState({ isChangingStyle: false })\n\t\t\t}\n\t\t},\n\t\t[editor]\n\t)\n\n\treturn (\n\t\t<Popover id=\"style menu\" onOpenChange={handleStylesOpenChange}>\n\t\t\t<PopoverTrigger disabled={disableStylePanel}>\n\t\t\t\t<Button\n\t\t\t\t\tclassName=\"tlui-toolbar__tools__button tlui-toolbar__styles__button\"\n\t\t\t\t\tdata-testid=\"mobile.styles\"\n\t\t\t\t\tstyle={{ color: currentColor ?? 'var(--color-text)' }}\n\t\t\t\t\ttitle={msg('style-panel.title')}\n\t\t\t\t>\n\t\t\t\t\t<Icon icon={currentColor ? 'blob' : 'mixed'} />\n\t\t\t\t</Button>\n\t\t\t</PopoverTrigger>\n\t\t\t<PopoverContent side=\"top\" align=\"end\">\n\t\t\t\t<StylePanel isMobile />\n\t\t\t</PopoverContent>\n\t\t</Popover>\n\t)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAwCE;AAxCF,oBAA6E;AAC7E,mBAA4B;AAC5B,4BAA+B;AAC/B,wBAA2B;AAC3B,oBAAuB;AACvB,kBAAqB;AACrB,qBAAwD;AAEjD,SAAS,mBAAmB;AAClC,QAAM,aAAS,yBAAU;AACzB,QAAM,UAAM,sCAAe;AAE3B,QAAM,mBAAe;AAAA,IACpB;AAAA,IACA,MAAM;AACL,YAAM,QAAQ,OAAO,aAAa,IAAI,+BAAiB;AACvD,UAAI,CAAC;AAAO,eAAO;AACnB,UAAI,MAAM,SAAS;AAAS,eAAO;AACnC,YAAM,YAAQ,oCAAqB,EAAE,YAAY,OAAO,KAAK,WAAW,CAAC;AACzE,aAAO,MAAM,MAAM,KAAK,EAAE;AAAA,IAC3B;AAAA,IACA,CAAC,MAAM;AAAA,EACR;AAEA,QAAM,wBAAoB;AAAA,IACzB;AAAA,IACA,MAAM,OAAO,QAAQ,QAAQ,QAAQ,UAAU,OAAO;AAAA,IACtD,CAAC,MAAM;AAAA,EACR;AAEA,QAAM,6BAAyB;AAAA,IAC9B,CAAC,WAAoB;AACpB,UAAI,CAAC,QAAQ;AACZ,eAAO,oBAAoB,EAAE,iBAAiB,MAAM,CAAC;AAAA,MACtD;AAAA,IACD;AAAA,IACA,CAAC,MAAM;AAAA,EACR;AAEA,SACC,6CAAC,0BAAQ,IAAG,cAAa,cAAc,wBACtC;AAAA,gDAAC,iCAAe,UAAU,mBACzB;AAAA,MAAC;AAAA;AAAA,QACA,WAAU;AAAA,QACV,eAAY;AAAA,QACZ,OAAO,EAAE,OAAO,gBAAgB,oBAAoB;AAAA,QACpD,OAAO,IAAI,mBAAmB;AAAA,QAE9B,sDAAC,oBAAK,MAAM,eAAe,SAAS,SAAS;AAAA;AAAA,IAC9C,GACD;AAAA,IACA,4CAAC,iCAAe,MAAK,OAAM,OAAM,OAChC,sDAAC,gCAAW,UAAQ,MAAC,GACtB;AAAA,KACD;AAEF;",
  "names": []
}
