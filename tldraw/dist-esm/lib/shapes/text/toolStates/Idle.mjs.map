{
  "version": 3,
  "sources": ["../../../../../src/lib/shapes/text/toolStates/Idle.ts"],
  "sourcesContent": ["import { StateNode, TLEventHandlers, TLGroupShape, TLTextShape } from '@tldraw/editor'\nimport { updateHoveredId } from '../../../tools/selection-logic/updateHoveredId'\n\nexport class Idle extends StateNode {\n\tstatic override id = 'idle'\n\n\toverride onPointerMove: TLEventHandlers['onPointerMove'] = (info) => {\n\t\tswitch (info.target) {\n\t\t\tcase 'shape':\n\t\t\tcase 'canvas': {\n\t\t\t\tupdateHoveredId(this.editor)\n\t\t\t}\n\t\t}\n\t}\n\n\toverride onPointerDown: TLEventHandlers['onPointerDown'] = (info) => {\n\t\tconst { hoveredShape } = this.editor\n\t\tconst hitShape =\n\t\t\thoveredShape && !this.editor.isShapeOfType<TLGroupShape>(hoveredShape, 'group')\n\t\t\t\t? hoveredShape\n\t\t\t\t: this.editor.getShapeAtPoint(this.editor.inputs.currentPagePoint)\n\t\tif (hitShape) {\n\t\t\tif (this.editor.isShapeOfType<TLTextShape>(hitShape, 'text')) {\n\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\tthis.editor.setSelectedShapes([hitShape.id])\n\t\t\t\t\tthis.editor.setEditingShape(hitShape.id)\n\t\t\t\t\tthis.editor.setCurrentTool('select.editing_shape', {\n\t\t\t\t\t\t...info,\n\t\t\t\t\t\ttarget: 'shape',\n\t\t\t\t\t\tshape: hitShape,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\n\t\tthis.parent.transition('pointing', info)\n\t}\n\n\toverride onEnter = () => {\n\t\tthis.editor.setCursor({ type: 'cross', rotation: 0 })\n\t}\n\n\toverride onKeyDown: TLEventHandlers['onKeyDown'] = (info) => {\n\t\tif (info.key === 'Enter') {\n\t\t\tconst { onlySelectedShape } = this.editor\n\t\t\t// If the only selected shape is editable, start editing it\n\t\t\tif (\n\t\t\t\tonlySelectedShape &&\n\t\t\t\tthis.editor.getShapeUtil(onlySelectedShape).canEdit(onlySelectedShape)\n\t\t\t) {\n\t\t\t\tthis.editor.setCurrentTool('select')\n\t\t\t\tthis.editor.setEditingShape(onlySelectedShape.id)\n\t\t\t\tthis.editor.root.current.value!.transition('editing_shape', {\n\t\t\t\t\t...info,\n\t\t\t\t\ttarget: 'shape',\n\t\t\t\t\tshape: onlySelectedShape,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\toverride onCancel = () => {\n\t\tthis.editor.setCurrentTool('select')\n\t}\n}\n"],
  "mappings": "AAAA,SAAS,iBAA6D;AACtE,SAAS,uBAAuB;AAEzB,MAAM,aAAa,UAAU;AAAA,EACnC,OAAgB,KAAK;AAAA,EAEZ,gBAAkD,CAAC,SAAS;AACpE,YAAQ,KAAK,QAAQ;AAAA,MACpB,KAAK;AAAA,MACL,KAAK,UAAU;AACd,wBAAgB,KAAK,MAAM;AAAA,MAC5B;AAAA,IACD;AAAA,EACD;AAAA,EAES,gBAAkD,CAAC,SAAS;AACpE,UAAM,EAAE,aAAa,IAAI,KAAK;AAC9B,UAAM,WACL,gBAAgB,CAAC,KAAK,OAAO,cAA4B,cAAc,OAAO,IAC3E,eACA,KAAK,OAAO,gBAAgB,KAAK,OAAO,OAAO,gBAAgB;AACnE,QAAI,UAAU;AACb,UAAI,KAAK,OAAO,cAA2B,UAAU,MAAM,GAAG;AAC7D,8BAAsB,MAAM;AAC3B,eAAK,OAAO,kBAAkB,CAAC,SAAS,EAAE,CAAC;AAC3C,eAAK,OAAO,gBAAgB,SAAS,EAAE;AACvC,eAAK,OAAO,eAAe,wBAAwB;AAAA,YAClD,GAAG;AAAA,YACH,QAAQ;AAAA,YACR,OAAO;AAAA,UACR,CAAC;AAAA,QACF,CAAC;AACD;AAAA,MACD;AAAA,IACD;AAEA,SAAK,OAAO,WAAW,YAAY,IAAI;AAAA,EACxC;AAAA,EAES,UAAU,MAAM;AACxB,SAAK,OAAO,UAAU,EAAE,MAAM,SAAS,UAAU,EAAE,CAAC;AAAA,EACrD;AAAA,EAES,YAA0C,CAAC,SAAS;AAC5D,QAAI,KAAK,QAAQ,SAAS;AACzB,YAAM,EAAE,kBAAkB,IAAI,KAAK;AAEnC,UACC,qBACA,KAAK,OAAO,aAAa,iBAAiB,EAAE,QAAQ,iBAAiB,GACpE;AACD,aAAK,OAAO,eAAe,QAAQ;AACnC,aAAK,OAAO,gBAAgB,kBAAkB,EAAE;AAChD,aAAK,OAAO,KAAK,QAAQ,MAAO,WAAW,iBAAiB;AAAA,UAC3D,GAAG;AAAA,UACH,QAAQ;AAAA,UACR,OAAO;AAAA,QACR,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AAAA,EAES,WAAW,MAAM;AACzB,SAAK,OAAO,eAAe,QAAQ;AAAA,EACpC;AACD;",
  "names": []
}
